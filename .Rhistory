DayofYear <- data.frame(Day = rep(NA,nrow(Homocides_2018)),
ID = rep(NA,nrow(Homocides_2018)))
for (r in 1:nrow(Homocides_2018)){
DayofYear[r,1] <- yday(mdy_hms(Homocides_2018$Date[r]))
DayofYear[r,2] <- Homocides_2018$ID[r]
}
Homocides_2018 <- merge(Homocides_2018, DayofYear, by = c("ID"))
runApp('Documents/GitHub/Chicago_shooting')
runApp('Documents/GitHub/Chicago_shooting')
runApp('Documents/GitHub/Chicago_shooting')
runApp('Documents/GitHub/Chicago_shooting')
runApp('Documents/GitHub/Chicago_shooting')
runApp('Documents/GitHub/Chicago_shooting')
View(sites)
runApp('Documents/GitHub/Chicago_shooting')
runApp('Documents/GitHub/Chicago_shooting')
help(observe)
help("observeEvent")
runApp('Documents/GitHub/Chicago_shooting')
runApp('Documents/GitHub/Chicago_shooting')
runApp('Documents/GitHub/Chicago_shooting')
runApp('Documents/GitHub/Chicago_shooting')
runApp('Documents/GitHub/Chicago_shooting')
View(sites)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
setView(lng = -87.62317, lat = 41.881832, zoom = 11)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
leafletProxy("MapPlot1", data = sites) %>%
clearMarkers() %>%
# addProviderTiles(providers$OpenStreetMap) %>%
addCircleMarkers(lng = sites$Longitude,
lat = sites$Latitude)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help("animationOptions")
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
install.packages('beepr')
beep(sound = 1, expr = NULL)
library(beepr)
beep(sound = 1, expr = NULL)
beep(sound = 7, expr = NULL)
beep()
beep(sound =67, expr = NULL)
beep(sound =6, expr = NULL)
alarm(0)
alarm()
system("say Just finished!")
beep(0)
library(devtools)
install_github("pingr", "rasmusab")
ls(beepr.ts)
ls("beepr.ts)
ls("beepr.ts")
ls("beepr")
ping()
beep()
system("rundll32 user32.dll,MessageBeep -1")
beep('facebook')
beep("Click-SoundBible.com-1387633738.wav")
help("beep)
help("beep")
runApp('Documents/GitHub/Chicago_shooting/Homocides')
#################################### Extract 2018 ####################################
Homocides_2018 <- filter(Homocides, Year == 2017)
m <- leaflet(width = 400, height = 400) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(lng = Homocides_2018$Longitude,
lat = Homocides_2018$Latitude,
radius = 6)
m  # Print the map
#################################### Process data ####################################
# In this section, I want to convert from the date to Day of the Year
library(lubridate)
DayofYear <- data.frame(Day = rep(NA,nrow(Homocides_2018)),
ID = rep(NA,nrow(Homocides_2018)))
for (r in 1:nrow(Homocides_2018)){
DayofYear[r,1] <- yday(mdy_hms(Homocides_2018$Date[r]))
DayofYear[r,2] <- Homocides_2018$ID[r]
}
Homocides_2018 <- merge(Homocides_2018, DayofYear, by = c("ID"))
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
50*365
18.25/365
runApp('Documents/GitHub/Chicago_shooting/Homocides')
yday(mdy_hms(Homocides_2018$Date))
DayofYear <- data.frame(Day = rep(NA,nrow(Homocides_2018)),
ID = rep(NA,nrow(Homocides_2018)))
#################################### SECTION TITLE ####################################
# shinyApp(ui = ui, server = server)
DayofYear[,1] <- yday(mdy_hms(Homocides_2018$Date))
DayofYear[,2] <- Homocides_2018$ID
View(DayofYear)
#################################### Extract 2018 ####################################
Homocides_2018 <- filter(Homocides, Year == 2017)
m <- leaflet(width = 400, height = 400) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(lng = Homocides_2018$Longitude,
lat = Homocides_2018$Latitude,
radius = 6)
m  # Print the map
Homocides_2018 <- merge(Homocides_2018, DayofYear, by = c("ID"))
#################################### Extract 2018 ####################################
Homocides_2018 <- filter(Homocides, Year == 2018)
m <- leaflet(width = 400, height = 400) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(lng = Homocides_2018$Longitude,
lat = Homocides_2018$Latitude,
radius = 6)
m  # Print the map
#################################### Process data ####################################
# In this section, I want to convert from the date to Day of the Year
library(lubridate)
DayofYear <- data.frame(Day = rep(NA,nrow(Homocides_2018)),
ID = rep(NA,nrow(Homocides_2018)))
DayofYear[,1] <- yday(mdy_hms(Homocides_2018$Date))
DayofYear[,2] <- Homocides_2018$ID
Homocides_2018 <- merge(Homocides_2018, DayofYear, by = c("ID"))
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
#################################### Extract 2018 ####################################
Homocides_2018 <- filter(Homocides, Year == 2018)
m <- leaflet(width = 400, height = 400) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(lng = Homocides_2018$Longitude,
lat = Homocides_2018$Latitude,
radius = 6)
m  # Print the map
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
#################################### Process data ####################################
# In this section, I want to convert from the date to Day of the Year
library(lubridate)
DayofYear <- data.frame(Day = rep(NA,nrow(Homocides_2018)),
ID = rep(NA,nrow(Homocides_2018)))
DayofYear[,1] <- yday(mdy_hms(Homocides_2018$Date))
DayofYear[,2] <- Homocides_2018$ID
Homocides_2018 <- merge(Homocides_2018, DayofYear, by = c("ID"))
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help("unique")
unique(Homocides_2018$Year)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
unique(Homocides$Year)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help selectInput()
help("selectInput")
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
#################################### Process data ####################################
# In this section, I want to convert from the date to Day of the Year
library(lubridate)
DayofYear <- data.frame(Day = rep(NA,nrow(Homocides)),
ID = rep(NA,nrow(Homocides)))
DayofYear[,1] <- yday(mdy_hms(Homocides$Date))
DayofYear[,2] <- Homocides$ID
Homocides_2018 <- merge(Homocides, DayofYear, by = c("ID"))
View(Homocides)
View(Homocides)
#################################### Process data ####################################
# In this section, I want to convert from the date to Day of the Year
library(lubridate)
DayofYear <- data.frame(Day = rep(NA,nrow(Homocides)),
ID = rep(NA,nrow(Homocides)))
DayofYear[,1] <- yday(mdy_hms(Homocides$Date))
DayofYear[,2] <- Homocides$ID
Homocides <- merge(Homocides, DayofYear, by = c("ID"))
View(Homocides)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help("eventReactive")
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help(addCircleMarkers)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help("conditionalPanel")
help("absolutePanel")
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
plot(1,1)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help(length)
sizeOf
help("size")
help("nrow")
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help(plot)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
a
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help(sum)
a
a <- 1
a <- a + 1
a
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
a = rep(0, 3)
a
a = rep(0, 366)
a[1,1]
a[1,]
typeof(a)
a[]
a[1]
a[2]
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
a <- [1:5,1]
a <- (1:5,1)
a <- (1:5)
a
a <- (1:5,1:5)
a <- (1:5)
a <- (1:366)
a
dim(a)
typeOf(a)
typeof(a)
help(cumsum)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
Homocides
url <- 'https://data.cityofchicago.org/api/views/k9xv-yxzs/rows.csv?accessType=DOWNLOAD'
x <- getURL(url)
Homocides <- read.csv(textConnection(x))
Homocides <- read.csv(textConnection(x))
View(Homocides)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
#################################### Process data ####################################
# In this section, I want to convert from the date to Day of the Year
library(lubridate)
DayofYear <- data.frame(Day = rep(NA,nrow(Homocides)),
ID = rep(NA,nrow(Homocides)))
DayofYear[,1] <- yday(mdy_hms(Homocides$Date))
DayofYear[,2] <- Homocides$ID
Homocides <- merge(Homocides, DayofYear, by = c("ID"))
runApp('Documents/GitHub/Chicago_shooting/Homocides')
vector(mode = 'string',length = 10)
vector(mode = 'any',length = 10)
vector(length = 10)
vector(mode = "list",length = 10)
#################################### SECTION TITLE ####################################
D <- data.frame(color = rep(NA,nrow(Homocides)))
for (r in 1:nrow(Homocides)) {
if(Homocides[r,3] == 'true'){
D[r,1] <- 'blue'
}
else {
D[r,1] <- 'red'
}
}
}
#################################### SECTION TITLE ####################################
D <- data.frame(color = rep(NA,nrow(Homocides)))
for (r in 1:nrow(Homocides)) {
if(Homocides[r,3] == 'true'){
D[r,1] <- 'blue'
}
else {
D[r,1] <- 'red'
}
}
View(D)
#################################### SECTION TITLE ####################################
D <- data.frame(color = rep(NA,nrow(Homocides)),
ID = rep(NA,nrow(Homocides)))
for (r in 1:nrow(Homocides)) {
if(Homocides[r,3] == 'true'){
D[r,1] <- 'blue'
D[r,2] <- Homocides[r,1]
}
else {
D[r,1] <- 'red'
D[r,2] <- Homocides[r,1]
}
}
View(D)
Homocides <- merge(Homocides, D, by = c("ID"))
View(Homocides)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
rm(DayofYear,D)
rm(DayofYear,D,Homocides_2018,m,a)
rm(DayofYear,D,Homocides_2018,m,a)
help(addLegend)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(Homocides)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
View(D)
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[r,2] <- D[r,2] + 1
}
else {
a <- a + 1
}
}
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[r,2] <- D[r,2] + 1
}
else {
a<- a + 1
}
}
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
input
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
Homocides_flt <- filter(Homocides,Year 2017)
Homocides_flt <- filter(Homocides,Year 2017)
Homocides_flt <- filter(Homocides,Year ==2017)
D <- data.frame(Day = rep(NA,365),
Homocide_cnt = rep(NA,365))
# Zip through all of the homocides and then calculate the number of
# homocides per day.
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[r,2] <- D[r,2] + 1
}
else {
a<- a + 1
}
}
View(D)
View(Homocides_flt)
Homocides_flt[r,23]
Homocides_flt[order(Day),]
Homocides_flt[order(Day),]
Homocides_flt[order(Day)=]
Homocides_flt[order(Day)]
Homocides_flt[order(Homocides_flt$Day,)]
example(order)
help(order)
Homocides_flt[order(day),]
Homocides_flt[order(Day),]
Data <- Homocides_flt[order(Day),]
Data <- Homocides_flt[order(Homocides_flt$Day),]
View(Data)
Homocides_flt <- Homocides_flt[order(Homocides_flt$Day),]
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[r,2] <- D[r,2] + 1
}
else {
a<- a + 1
}
}
View(D)
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[a,2] <- D[a,2] + 1
}
else {
a<- a + 1
}
}
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[a,2] <- D[a,2] + 1
}
else {
D[a,1] <- a
a<- a + 1
}
}
r = 1
a = 1
if(Homocides_flt[r,23] == a)
{}
Homocides_flt[r,23] == a
D[a,2]
D[a,2] + 1
D <- data.frame(Day = rep(NA,365),
Homocide_cnt = rep(0,365))
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[a,2] <- D[a,2] + 1
}
else {
D[a,1] <- a
a<- a + 1
}
}
plot(D$Day,D$Homocide_cnt)
cumsum(D$Homocide_cnt)
plot(D$Day,cumsum(D$Homocide_cnt))
D$Homocide_cnt = cumsum(D$Homocide_cnt)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
#################################### Set dir and import libraries ####################################
library(tidyverse)
library(ggplot2)
# library(xlsx)
library(ggalt)
library(scales)
library(gridExtra)
library(rvest)
library(plyr)
library(stringr)
library(textclean)
library(XML)
library(lubridate)
library(htmltab)
library(viridis)
library(formattable)
library(htmltools)
library(webshot)
setwd('/Users/matthew/Documents/GitHub/wilderness')
#################################### Scrape wikipedia page ####################################
webpage <- "https://en.wikipedia.org/wiki/List_of_U.S._Wilderness_Areas"
tbls <-  htmltab("http://en.wikipedia.org/wiki/List_of_U.S._Wilderness_Areas",1)
plURl <- "https://ballotpedia.org/Federal_land_ownership_by_state#Federal_land_by_state"
pl_tbl <- htmltab('https://ballotpedia.org/Federal_land_ownership_by_state#Federal_land_by_state',2)
rm(plURl)
rm(webpage)
#################################### Clean Table ####################################
# Remove commas from area
tbls$`Size >> acres` <- (gsub(",","",tbls$`Size >> acres`))
tbls$`Size >> ha` <- (gsub(",","",tbls$`Size >> ha`))
tbls$`Size >> acres` <- as.numeric(tbls$`Size >> acres`)
tbls$`Size >> ha` <-  as.numeric(tbls$`Size >> ha`)
pl_tbl$`Federal land ownership by state (as of 2013) >> Percentage of federal land` <- (gsub("%","",pl_tbl$`Federal land ownership by state (as of 2013) >> Percentage of federal land`))
pl_tbl$`Federal land ownership by state (as of 2013) >> Federal land acreage` <- (gsub(",","",pl_tbl$`Federal land ownership by state (as of 2013) >> Federal land acreage`))
pl_tbl$`Federal land ownership by state (as of 2013) >> Total state acreage` <- (gsub(",","",pl_tbl$`Federal land ownership by state (as of 2013) >> Total state acreage`))
pl_tbl$`Federal land ownership by state (as of 2013) >> Federal land acreage` <- as.numeric(pl_tbl$`Federal land ownership by state (as of 2013) >> Federal land acreage`)
pl_tbl$`Federal land ownership by state (as of 2013) >> Total state acreage` <- as.numeric(pl_tbl$`Federal land ownership by state (as of 2013) >> Total state acreage`)
pl_tbl$`Federal land ownership by state (as of 2013) >> Percentage of federal land` <- as.numeric(pl_tbl$`Federal land ownership by state (as of 2013) >> Percentage of federal land`)
pl_tbl <- pl_tbl[-nrow(pl_tbl),] #remove the last row and the total US row
pl_tbl <- pl_tbl[-nrow(pl_tbl),]
##################################### Munging ####################################
#convert dates
tbls$Designated <- mdy(tbls$Designated)
year = year(tbls$Designated)
tbls <- cbind(tbls, year)
lwr48 <- filter(tbls,tbls$State != "AK")
wild_rate <-  data.frame(count(tbls,c('year')))
area_rate <- aggregate(tbls$`Size >> acres`,by = list(tbls$year), sum)
colnames(area_rate) <- c('Year','Area (acre)')
area_rt_lwr48 <- aggregate(lwr48$`Size >> acres`,by = list(lwr48$year), sum)
colnames(area_rt_lwr48) <- c('Year','Area (acre)')
stateArea <- aggregate(lwr48$`Size >> acres`,by = list(lwr48$State),sum)
colnames(stateArea) <- c('State', 'Area (acre)')
stateCount <- data.frame(count(lwr48,c('State')))
colnames(stateCount) <- c('State','Count')
stateCount <-  stateCount[order(-stateCount$Count),]
stateData <- merge(stateArea, stateCount, by = "State")
stateData <-  stateData[order(-stateData$Count),]
colnames(pl_tbl) <- c('State','Federal P.L. (Ac)','Total State Area (Ac)','Percent public')
pl_lwr48 <- filter(pl_tbl, pl_tbl$State != 'Alaska')
pl_lwr48$State <- state.abb[match(pl_lwr48$State,state.name)]
#################################### Figure 1; Format table ########################################
#Write a table that shows the states with the most wilderness areas and
# the largest area designated as wilderness
widget_formattable <- formattable(stateData,
list(Count = color_tile('white','orange'),
`Area (acre)` = color_tile('white','green')))
widget_formattable
html_table <- format_table(stateData,
list(Count = color_tile('white','orange'),
`Area (acre)` = color_tile('white','green')))
html_table
write(paste(html_header, html_table, sep=""), "./Table_1_Wilderness_and_Area.html")
